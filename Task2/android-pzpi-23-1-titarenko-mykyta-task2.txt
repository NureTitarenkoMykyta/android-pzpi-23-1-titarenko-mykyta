                              Міністерство освіти і науки України



                              Харківський національний університет радіоелектроніки







                              Кафедра програмування під Android




                                            Звіт
                                  з практичної роботи №2
                              з дисципліни «Програмування під Android»






   Виконав:                                                                      Перевірили:
   ст. гр. ПЗПІ-23-1                                                             Сокорчук Ігор
   Тітаренко Микита                                                              Петрович






                                      Харків 2024
                                        ЗАВДАННЯ

1.	Практика з різними видами розмітки.
2.	Дослідження атрибутів елементів.
3.	Ознайомлення з життєвим циклом Activity.


ХІД РОБОТИ

1.	Практика з різними видами розмітки
1.1.	Створюємо розмітку, що містить кілька кнопок, розташованих одна під одною, використовуючи розмітку LinearLayout. Застосовуємо властивість orientation для вертикальної орієнтації, задаючи значення “vertical”. Задаємо для кожної кнопки різне значення властивості layout_width та layout_height. Для першої кнопки використовуємо wrap_content через що її розмір буде залежити від її контекста. Для другої match_parent, через що вона буде займати увесь доступний простір.
1.2.	Обираємо більш складний макет, використовуючи ConstraintLayout. Використовуючи інструмент Design в Android Studio, розміщуємо елементи на екрані, використовуючи обмеження для позиціонування (constraints), щоб задати їх взаємне розташування, перетягуючи візуальні точки елементів. Наприклад, текст вирівнюємо по центру екрана, а кнопку — під текстом.
1.3.	Задаємо кількість стовпців і рядків у GridLayout за допомогою android:columnCount і android:rowCount. Додаємо кілька елементів (TextView, Button, ImageView) у GridLayout, задаючи їх позицію в сітці за допомогою атрибутів layout_row і layout_column.
1.4.	Створюємо розмітку з використанням RelativeLayout, додаючи кілька елементів (TextView, Button, ImageView) та задаючи їх позицію, використовуючи атрибути, такі як layout_below, layout_toRightOf, layout_alignParentStart тощо.
2.	Дослідження атрибутів елементів
2.1.	Використовуємо атрибути padding і margin для налаштування відступів:
2.2.	Атрибут gravity використовуємо для вирівнювання контенту всередині елемента, а layout_gravity — для позиціонування самого елемента в контейнері.
2.3.	Налаштовуємо TextView з різними стилями (розмір шрифту, колір, жирність): Наприклад, android:textSize="20sp", android:textColor="#FF0000", android:textStyle="bold" для стилізації тексту.
3.	Ознайомлення з життєвим циклом Activity.
3.1.	 Для кращого розуміння порядку викликів методів життєвого циклу, додамо логування до кожного з методів. Для цього використовуємо клас Log.
3.2.	Запускаємо застосунок на емуляторі або фізичному пристрої. Відкриваємо Logcat в Android Studio і спостерігаємо за порядком викликів методів при запуску і закритті Activity: onCreate(), onStart(), onResume() при запуску і onPause(), onStop(), onDestroy() при закритті Activity.
3.3.	Змінюємо орієнтацію пристрою з портретної на ландшафтну і переглядаємо лог в Android Studio. Помічаємо, що викликаються методи onPause(), onStop(), onDestroy() при завершенні поточного Activity і onCreate(), onStart(), onResume() при його перезапуску.
3.4.	Додаємо EditText у файл activity_main.xml, щоб мати текстове поле. Для збереження введеного тексту при зміні орієнтації екрана використовуємо методи onSaveInstanceState() та onRestoreInstanceState(). Запускаємо застосунок, вводимо текст у поле, змінюємо орієнтацію екрана та бачимо, що після перезавантаження Activity текст зберігається.
3.5.	Додаємо нове Activity у проєкт через контекстне меню New -> Activity -> Empty Activity. У MainActivity.java створюємо метод для переходу на друге Activity: При переході між Activity можна відстежити в Logcat виклики життєвого циклу: onPause(), onStop() у першому Activity, та onCreate(), onStart(), onResume() у другому Activity.
3.6.	Додаємо кнопку для виклику методу finish() в основному Activity. У MainActivity.java додаємо логіку для завершення Activity, використовуючи метод finish. Після натискання кнопки, в Logcat можна побачити виклики onPause(), onStop(), onDestroy(), що означає завершення Activity.


ВИСНОВОК

	Отже, виконавши практичну роботу №2, я ознайомився із основними поняттями розмітки інтерфейсу в Android.  Навчитися створювати XML-файли розмітки та використовувати різні типи Layout для побудови інтерфейсу застосунку. Також, ознайомився із життєвим циклом компонентів Activity у застосунках Android та навчився керувати станами Activity через використання ключових методів життєвого циклу. Посилання на відеозвіт: https://www.youtube.com/watch?v=UVOa1cUTbuk.


ВИКОРИСТАНІ ДЖЕРЕЛА

1.	Views / UI / Core areas / Develop / Android Develops. URL: 
 https://developer.android.com/develop/ui/views/layout/declaring-layout (дата звернення: 05.10.2024).
2.	Android Activity lifecycle / Android Tutorial/ JavaPoint. URL: 
https://www.javatpoint.com/android-life-cycle-of-activity (дата звернення: 04.10.2024).
3.	Розмітка екрану/ Теми що вивчаються у дисципліні / Програмування під Android / dl.nure. URL: 
https://dl.nure.ua/mod/page/view.php?id=583063 (дата звернення: 05.10.2024).




ДОДАТОК А

Код програми
Увесь код програми можно знайти за посиланням у GitHub:
https://github.com/NureTitarenkoMykyta/android-pzpi-23-1-titarenko-mykyta/tree/main/Task2/android-pzpi-23-1-Titarenko-Mykyta-pract-task2

