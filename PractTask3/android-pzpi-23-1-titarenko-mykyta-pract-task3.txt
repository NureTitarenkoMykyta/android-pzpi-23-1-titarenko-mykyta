Міністерство освіти і науки України



Харківський національний університет радіоелектроніки





Кафедра програмування під Android


Звіт
з практичної роботи №3
з дисципліни «Програмування під Android»




   Виконав:                                                                             Перевірили:
   ст. гр. ПЗПІ-23-1                                                                Сокорчук Ігор
   Тітаренко Микита                                                              Петрович






Харків 2024
ЗАВДАННЯ

1.	Практика з діалоговими панелями (Dialog) в Android.
2.	Ознайомлення з обробником черг повідомлень (Handler) в Android.
3.	Дослідження списків з прогортанням (RecyclerView Adapter).

























ХІД РОБОТИ

1.	Практика з діалоговими панелями (Dialog) в Android
1.1.	Додаємо кнопку до основної розмітки (activity_main.xml), яка ініціюватиме показ діалогової панелі:
1.2.	У файлі MainActivity.java реалізуємо логіку для показу AlertDialog. Для цього створюємо новий об'єкт AlertDialog.Builder, в який передаємо контекст поточної активності, щоб діалог знав, до якого контексту належить.
1.3.	Налаштовуємо заголовок і текст повідомлення для діалогу.
1.4.	Додамо кнопки для підтвердження та скасування дії.
Реалізація діалогової панелі:
Button showDialogButton = findViewById(R.id.showDialogButton);
TextView textView = findViewById(R.id.textView);
showDialogButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
        new AlertDialog.Builder(MainActivity.this)
                .setTitle("Зміна кольору")
                .setMessage("Ви хочете, щоб текст був синього кольору?")
                .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        textView.setTextColor(Color.BLUE);
                    }
                })
                .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {

                    }
                })
                .show();
    }
});
1.5.	Додаємо кнопку для виклику DatePickerDialog.
1.6.	Усередині методу onClick() створюємо новий об'єкт DatePickerDialog.
1.7.	Викликаємо метод show() для відображення діалогового вікна.
1.8.	Створимо кнопку для Custom Dialog.
1.9.	Реалізуємо показ Custom Dialog у MainActivity, використовуючи LayoutInflater і AlertDialog.Builder.
Реалізація Custom Dialog:
Button showCustomDialogButton = findViewById(R.id.showCustomDialogButton);
showCustomDialogButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v){
        LayoutInflater inflater = getLayoutInflater();
        View dialogView = inflater.inflate(R.layout.custom_dialog, null);
        EditText editText = dialogView.findViewById(R.id.customDialogInput);
        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
        builder.setView(dialogView)
                .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        textView.setText(editText.getText().toString());
                    }
                })
                .setNegativeButton("Cancle", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                    }
                });
                builder.create().show();
    }
});
2.	Ознайомлення з обробником черг повідомлень (Handler) в Android
2.1.	У новому файлі розмітки activity_handle_practice.xml додамо кнопку і текстове поле.
2.2.	У класі MainActivity.java створимо об’єкт Handler.
2.3.	Оновіть приклад для взаємодії з фоновим потоком, використовуючи Thread.
2.4.	Оновимо приклад для використання об’єкта Message, використовуючи методи obtainMessage() і sendMessage();
2.5.	Для більш складних задач створіть фоновий потік за допомогою HandlerThread.
Реалізація HandlerThread:
HandlerThread handlerThread = new HandlerThread("BackgroundThread");
handlerThread.start();
Handler backgroundHandler = new Handler(handlerThread.getLooper());

backgroundHandler.post(new Runnable() {
    @Override
    public void run() {
        try {
            Thread.sleep(4000);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                handlerMessageTextView.setText("Задача у фоновому потоці завершена");
            }
        });
    }
});
3.	Дослідження списків з прогортанням (RecyclerView Adapter).
3.1.	 Створимо ще одну розмітку activity_recycler_view_adapter_practice.
3.2.	Додавамо RecyclerView до макета.
3.3.	Налаштуємо адаптер (Adapter).
3.4.	Налаштуємо ViewHolder.
3.5.	Створимо макет для елементів списку.
3.6.	Підключимо RecyclerView до адаптера.
3.7.	Розширемо функціонал списку, додавши можливість взаємодії з елементами (при натисканні на елемент показувати повідомлення через Toast).
3.8.	Додамо до списку зображення.
Реалізація класу MyAdapter та внутрішнього класу ViewHolder:
public class MyAdapter extends RecyclerView.Adapter<MyAdapter.ViewHolder>{

    public class ViewHolder extends RecyclerView.ViewHolder{
        public TextView textView;
        public ImageView imageView;
        public ViewHolder(View v) {
            super(v);
            textView = v.findViewById(R.id.textView);
            imageView = v.findViewById(R.id.imageView);
        }
    }

    private String[] mData;
    private int[] mImages;

    public MyAdapter(String[] data, int[] images){
        mData = data;
        mImages = images;
    }

    @NonNull
    @Override
    public MyAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.list_item, parent, false);
        return new ViewHolder(v);
    }

    @Override
    public void onBindViewHolder(ViewHolder holder, int position) {
        holder.textView.setText(mData[position]);
        holder.imageView.setImageResource(mImages[position]);
        holder.itemView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Toast.makeText(v.getContext(), mData[position], Toast.LENGTH_LONG).show();
            }
        });
    }

    @Override
    public int getItemCount() {
        return mData.length;
    }
}





























ВИСНОВОК

	Отже, виконавши практичну роботу №3, я ознайомився із діалоговими панелями в Android.  Навчився створювати обробники черг повідомлень. Також, ознайомився із списками прогортанням (RecyclerView Adapter). Посилання на відеозвіт: https://youtu.be/QHXLH_D8JEw.
























ВИКОРИСТАНІ ДЖЕРЕЛА

1.	Views / UI / Core areas / Develop / Android Develops. URL: 
 https://developer.android.com/develop/ui/views/components/dialogs (дата звернення: 03.11.2024).
2.	Android Activity lifecycle / Android Tutorial/ JavaPoint. URL: 
https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView.Adapter (дата звернення: 03.11.2024).






















ДОДАТОК А

Код програми
Увесь код програми можно знайти за посиланням у GitHub:
https://github.com/NureTitarenkoMykyta/android-pzpi-23-1-titarenko-mykyta/tree/main/PractTask3/android-pzpi-23-1-titarenko-mykyta-pract-task3

